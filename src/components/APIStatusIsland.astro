---
import { setTimeout } from 'node:timers/promises'
import { z } from 'astro/zod'
import { HYPERPING_STATUS_PAGE_URL } from 'astro:env/server'
import { Icon } from '@astrojs/starlight/components'

// TODO(HiDeoo) keep only index.mdx
// TODO(HiDeoo) docs

// FIXME(HiDeoo)
await setTimeout(300)

const apiSchema = z.object({
  indicator: z.union([z.literal('maintenance'), z.literal('incident'), z.literal('outage'), z.literal('up')]),
})
type APIStatus = z.output<typeof apiSchema>['indicator'] | 'unknown'

// FIXME(HiDeoo)
// let status: APIStatus = 'unknown'
let status: APIStatus = 'up'

// try {
//   // https://hyperping.com/docs/status-page/status-page-json
//   // Would probably use the Hyperping API in a real-world scenario with some caching.
//   const response = await fetch(new URL('/status.json', HYPERPING_STATUS_PAGE_URL))
//   if (!response.ok) throw new Error('Invalid response')
//   const data = apiSchema.parse(await response.json())
//   status = data.indicator
// } catch {
//   // Keep the unknown status if the status cannot be retrieved.
// }
---

<span class:list={['api-status', status]}>
  {
    status === 'up' ? (
      <svg width="16" height="16" viewBox="0 0 24 24" aria-hidden="true">
        <circle r="5" cx="12" cy="12" fill="currentColor" />
      </svg>
    ) : (
      <Icon name="warning" size="0.75rem" />
    )
  }
  <span class="sr-only">API status:</span>
  {status === 'up' ? 'Operational' : `${status.charAt(0).toUpperCase()}${status.slice(1)}`}
</span>

<style>
  .api-status {
    align-items: center;
    background-color: var(--sl-color-black);
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.5rem;
    color: var(--sl-color-gray-2);
    display: flex;
    font-size: var(--sl-text-sm);
    gap: 0.3125rem;
    padding: 0.125rem 0.625rem 0.125rem 0.375rem;
  }

  .up svg {
    color: var(--sl-color-green);
  }

  :global([data-theme='light']) .up svg {
    color: var(--sl-color-green-high);
  }

  :is(.maintenance, .incident, .unknown) svg {
    color: var(--sl-color-orange);
  }

  :global([data-theme='light']) :is(.maintenance, .incident, .unknown) svg {
    color: var(--sl-color-orange-high);
  }

  .outage svg {
    color: var(--sl-color-red);
  }

  :global([data-theme='light']) .outage svg {
    color: var(--sl-color-red-high);
  }
</style>
